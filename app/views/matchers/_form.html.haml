= nested_form_for @matcher, :html => {:class=>'form-horizontal', :multipart => true, :autocomplete=>"off", :id => "matcher_form", :style=> 'overflow: auto;'} do |f|
  - if @matcher.errors.any?
    #error_explanation
      %h2
        = pluralize(@matcher.errors.count, "error")
        prohibited this matcher from being saved:
      %ul
        - @matcher.errors.full_messages.each do |message|
          %li= message
  .control-group
    .fields
      = f.label :name, :class => 'control-label'
      = f.text_field :name, :style=>"width: 30%;"
  .control-group
    .fields
      = f.label :scenario, :class => 'control-label'
      = f.text_area :scenario, size: "30x4", :style=>"width: 30%; resize: vertical; max-height: 180px;"
			
			
  %br
    .control-group{:style=>"clear: both;"}
      %table#Matches
        = f.fields_for :matches, :wrapper => false do |rule_form|
          %tr
            %th Kind
            %th XPath
            %th Criteria
            %th Exp Value
          %tr.fields
            %td= rule_form.select :kind, options_for_select(Match.options_for_kind, rule_form.object.kind)

            %td= rule_form.text_field :expression

            %td= rule_form.select :eval_criteria, options_for_select(Match.options_for_eval_criteria, rule_form.object.eval_criteria)

            %td= rule_form.text_field :value

            %td= rule_form.link_to_remove "Remove this rule", :class => 'control-label'

        = f.link_to_add "Add a  Rule", :matches, :data => { :target => "#Matches" }

    .control-group{:style=>"clear: both;"}
      %table#responses
        = f.fields_for :responses, :wrapper => false do |response_form|
          %tr
            %th Content Type
            %th Kind
            %th Response
            %th XSL
            %th Fault Code
            %th Fault Reason
            %th Status Code
          %tr.fields
            %td= response_form.select :content_type, options_for_select(Response.options_for_content_type, response_form.object.content_type)
            
            %td= response_form.select :kind, options_for_select(Response::KIND, response_form.object.kind), {}, {class: 'content_type_select', onchange: 'toggle_response_blocks(this)', style: "width:150px"}

            %td= response_form.text_area :response, :style=>"width: 270px; height: 60px;", class: 'response_xml_text', disabled: true
            
            %td= response_form.select :xsl_id, Xsl.all.map { |key, value| [key.name, key.id] }, { include_blank: 'Select'}, {class: 'xsl_select', disabled: true, style: "width:150px"}

            %td= response_form.text_field :fault_code, class: 'fault_text', disabled: true
            
            %td= response_form.text_field :fault_reason, class: 'fault_text', disabled: true
						
            %td= response_form.text_field :status_code, style: "width:70px"

            %td= response_form.link_to_remove "Remove this response", :class => 'control-label'

        = f.link_to_add "Add a response", :responses, :data => { :target => "#responses" }
  .actions
    = f.submit "Create Matcher", :class => "btn"

:javascript
      
  function toggle_response_blocks(ele) {
    var select_val = $(ele).val();
    var parent_block = $(ele).parent().parent();
    
    if (select_val == 'response_body') {
      $(parent_block).find('.xsl_select').prop('disabled', true);
      $(parent_block).find('.fault_text').prop('disabled', true);
      $(parent_block).find('.response_xml_text').prop('disabled', false);
    }
    else if (select_val == 'xsl') {
      $(parent_block).find('.response_xml_text').prop('disabled', true);
      $(parent_block).find('.xsl_select').prop('disabled', false);
      $(parent_block).find('.fault_text').prop('disabled', true);
    }
    else if (select_val == 'soap_fault') {
      $(parent_block).find('.xsl_select').prop('disabled', true);
      $(parent_block).find('.fault_text').prop('disabled', false);
      $(parent_block).find('.response_xml_text').prop('disabled', true);
    }
  }
